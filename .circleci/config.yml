version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@3.2.1
  node: circleci/node@5

jobs:
  test-node:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run tests
          command: npm test --passWithNoTests
  build:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - gcp-cli/setup:
          version: latest
          use_oidc: true
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Updating the git tag version
          command: |
            last_tag=$(git describe --tags --abbrev=0)
            major_version=$(echo "$last_tag" | cut -d '.' -f 1)
            minor_version=$(echo "$last_tag" | cut -d '.' -f 2)
            patch_version=$(echo "$last_tag" | cut -d '.' -f 3)
            new_patch_version=$((patch_version + 1))
            # Construct the new tag with incremented patch version
            new_tag="${major_version}.${minor_version}.${new_patch_version}"
            # Create the tag 
            git tag -a "$new_tag" -m "Auto-generated tag: $new_tag"

            git push origin --tags          
      - run:
          name: Set up Docker for gcloud
          command: |
            gcloud auth configure-docker asia-south1-docker.pkg.dev
      - run:
          name: Docker build
          command: |
            docker build -t node-app .
      - run:
          name: Tag Docker image
          command: |
            latest_tag=$(git describe --tags --abbrev=0)
            docker tag node-app asia-south1-docker.pkg.dev/$GOOGLE_PROJECT_ID/social-media-api/social-media-api-image:${latest_tag}
      - run:
          name: Push docker image
          command: |
            latest_tag=$(git describe --tags --abbrev=0)
            docker push asia-south1-docker.pkg.dev/$GOOGLE_PROJECT_ID/social-media-api/social-media-api-image:${latest_tag}
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: THIS STEP NEEDS TO BE MODIFIED LATER. USINIG YQ COMAND I NEED TO CHECK IF THE IMAGE IN THE PARTICULAR DEPLOYMENT IS UPDATED. IF UPDATED PIPELINE SUCCESED . IF NOT , AFTER 10 MINUTES. PIPELINE FAILED
          command: |
            echo "SUCCESSFUL!!!!!!!!!!!!!"
  

workflows:
  main:
    jobs: 
      - test-node
      - build:
          context: MYCONTEXT
          filters:
             branches:
               only:
                 - main
      - release-approval:
          type: approval
          requires:
            - test-node
            - build
          filters:
             branches:
               only:
                 - main
      - deploy:
          requires:
            - test-node
            - build
            - release-approval
          filters:
             branches:
               only:
                 - main 